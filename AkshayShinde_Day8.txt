Name_Akshay Shinde
1) 

MyArithException.java

package Problem1;

public class MyArithException extends Exception{

	MyArithException(String s){
		super(s);
	}
}


Calculator.java

package Problem1;

public class Calculator {
	
	public static int caldouble(int num)throws MyArithException  {
		if(num==0) {
			throw new MyArithException("Zero not allowed");
		}
		else if(num<0) {
			throw new MyArithException("negative not allowed");
		}
		
		return(num+num);	
	}
}



Driver.java

package Problem1;

import java.util.Scanner;

public class Driver {

	public static void main(String[] args){
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter the number : ");
		int num = sc.nextInt();
		try {
		int op = Calculator.caldouble(num);
		System.out.println(op);
		}
		catch( MyArithException a) {
			a.printStackTrace();
		}
	}
}

2) 

Devloper Side : 
NumberNotDivisibleBySevenException.java

package devpack;

public class NumberNotDivisibleBySevenException extends Exception{
	
	
	public NumberNotDivisibleBySevenException(String s){
		super(s);
	}
}



Client Side:

MyMath.java

package clientpack;

import devpack.NumberNotDivisibleBySevenException;

public class MyMath {
	public void disp(int num) throws NumberNotDivisibleBySevenException {
		if(!(num%7==0)) {
			
			throw new NumberNotDivisibleBySevenException("Number is Not Divisible By Seven");
		}
		else
		{
			System.out.println("Number is Divisible By Seven");
		}
	}
}


Main.java

package clientpack;

import java.util.Scanner;
import devpack.NumberNotDivisibleBySevenException;

public class Main {

	public static void main(String[] args) {
		System.out.println("Enter the number : ");
		Scanner sc = new Scanner(System.in);
		int num = sc.nextInt();
		MyMath m = new MyMath();
		try {
			m.disp(num);
		} catch (NumberNotDivisibleBySevenException e) {
			e.printStackTrace();
		}
	}

}


3) 

package Problem1;

public class MyException extends Exception{
	public MyException(String s) {
		// TODO Auto-generated constructor stub
		super(s);
	}
}




Demo.java

package Problem1;

import java.util.Scanner;

public class Demo {

	public static void main(String[] args) {
		System.out.println("Enter the number try to less than 10 : ");
		Scanner sc = new Scanner(System.in);
		int num = sc.nextInt();
		Demo demo = new Demo();
		demo.show1(num);

	}

	public void show1(int num) {
		try {
			show2(num);
		} catch (MyException e) {
			e.printStackTrace();
		}
	}

	public void show2(int num)throws MyException {
		show3(num);
	}

	public void show3(int num) throws MyException {
		if(num>10) {
			throw new MyException("Number is greater than 10");
		}
		else {
			System.out.println("Number is less than 10");
		}
	}
}


4) 
Developer:

InvalidLengthException.java

package devpack;

public class InvalidLengthException extends Exception{
	
	public InvalidLengthException(String s){
		super(s);
	}
}





Client Side:

Authenticator.java

package clientpack;
import devpack.InvalidLengthException;
public class Authenticator {
	Authenticator(String s)throws InvalidLengthException{
		if(!(s.length()>5 && s.length()<10))   {
			throw new InvalidLengthException("  ");
		}
		else {
		done();
		}
	}
	void done() {
		System.out.println("successful authentication");
	}
}


Demo.java

package clientpack;

import java.util.Scanner;

import devpack.InvalidLengthException;

public class Demo {
	public static void main(String[] args)  {
		Scanner sc = new Scanner(System.in);
		String s = sc.next();
		try {
			Authenticator authenticator  = new Authenticator(s);
		} catch (InvalidLengthException e) {
			e.printStackTrace();
		}
	}
}


5) 

Develper Side:


MyResource.java

package devpack;

public class MyResource implements AutoCloseable{

	public MyResource(int capacity) throws ResourceNotAllocatedException
	{
		if(capacity>100)
		{
			throw new ResourceNotAllocatedException("not sufficient space");
		}
	}
    public void disp()
    {
    	System.out.println("successful");
    }
	@Override
	public void close()  {
		System.out.println("resource is closed");
		
	}

}


ResourceNotAllocatedException.java

package devpack;

public class ResourceNotAllocatedException extends Exception {
	public ResourceNotAllocatedException(String s){
		super(s);
	}
}





Client Side:

Demo.java

package clientpack;

import devpack.MyResource;
import devpack.ResourceNotAllocatedException;

public class Demo {
	public static void main(String[] args) {
		try (MyResource myresource = new MyResource(10))
		{
		myresource.disp();
		}
		catch(ResourceNotAllocatedException ref) {
			ref.printStackTrace();
		}
	}
}


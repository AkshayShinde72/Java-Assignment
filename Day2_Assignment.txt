/*
 1)create a class "Shape" with 2 attributes, "width" and "height". Make sure one 
 can not access these attributes directly.provide
 accessor methods on these attributes and allow them to call from outside of your class.
 */

package workspace;
import java.util.*;

class shape {
   private int width;
   private int height;
   
   public void setWidth(int num)
   {
	   width=num;
   }
   public void setHeight(int num)
   {
	   height=num;
   }
   public int getWidth()
   {
	   return width;
   }
   public int getHeight()
   {
	   return height;
   }
		
}

public class ass_2_1 {
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		
		shape s1=new shape();
		s1.setWidth(100);
		s1.setHeight(200);
		System.out.println("Width "+s1.getWidth());
		System.out.println("Height "+s1.getHeight());
		
		
	}
}

/*
 2) Define a class "MyClass" and make sure clients can instantiate it , 
a) without any argument
b) with one int argument
c) with two int arguments

	here you need to define 3 constructors inside "MyClass".
		default constructor, one parameterized and two parameterized constructor
 */

package workspace;
import java.util.*;
import java.util.*;
public class ass_2_2 {

	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		Myclass m1=new Myclass();
		Myclass m2=new Myclass(10);
		Myclass m3=new Myclass(10,20);
		
	}

}

class Myclass{
	Myclass()
	{
		System.out.println("Inside default constructor");
	}
	
	Myclass(int k)
	{
		System.out.println("Inside parameterized constructor " +k);
	}
	Myclass(int k,int m)
	{
		System.out.println("Inside two parameterized constructor " +k+" "+m);
	}
}


/*
 3) Define a class "Emp" with private static member "int cnt".
How will u make sure that outsiders can read the value of cnt ?

	make sure you have defined
	public static int getCnt() method
 */


package workspace;
import java.util.*;

class Emp{
	private static int cnt=10;

	public static int getCnt() {
		return cnt;
	}
	
}
public class ass_2_3 {

	public static void main(String[] args) {
		Emp e1=new Emp();
		System.out.println("Employee ="+e1.getCnt());

	}

}

/*
4) Define a class "DemoOb". 
create an instance of it.
now create a reference and assign the reference created in the above statement.
	Discuss what happens?
Now since u have 2 references, take one of the reference and assign a new instance of the class.
	Discuss what happens?
(For ur discussion, write necessary comments in the program)
 */

package workspace;
import java.util.*;

class DemoOb{
	private int num;
	DemoOb()
	{
		System.out.println("Inside default constructor");
	}
	
}
public class ass_2_4 {

	public static void main(String[] args) {
		DemoOb ob1=new DemoOb();  // first instance

		DemoOb ob2=ob1;  // ob2 is a reference to that instance where ob1 is referring to. 
		
		// first we have created the reference obj1 and assign this to object on heap 
		// Initialized another reference obj2 with same object 
		// then we assign the new object on heap give reference to obj2 now it will refer to the new object and stop referring the old object
		
		ob1=new DemoOb();  // here ob1 will refer to a new instance created.
	}

}

/*
 5) Define 3 classes A , B and C
in all these classes create static and nonstatic variables as well as methods.
Now Define a class "Demo" ,in which define "main" function. From this main function 
	try to access all the members of A ,B  and C.

 */
package workspace;
import java.util.*;
public class Demo {

	public static void main(String[] args) {
		
		A a1=new A();
		a1.setN(20);
		System.out.println(a1.getN());
		System.out.println(A.getM());
		
		System.out.println(B.getM());
		
		C c1=new C();
		c1.setB(20.3f);
		System.out.println(c1.getB());	

	}

}
class A{
	private int n;
	private static int m=10;
	
	public int getN() {
		return n;
	}
	public void setN(int n) {
		this.n = n;
	}
	public static int getM() {
		return m;
	}
}
class B{
	private static int m=20;
	
	public static int getM()
	{
		return m;
	}
}

class C{
	private float b;

	public float getB() {
		return b;
	}

	public void setB(float b) {
		this.b = b;
	}
	
	
}


//6) define static initializers in the above A,B and C classes and check the order of their execution.
package workspace;
import java.util.*;
public class ass_2_6 {

		public static void main(String[] args) {
			
			A a1=new A();
			B b1=new B();
			
			a1.setN(20);
			System.out.println(a1.getN());
			System.out.println(A.getM());
			
			System.out.println(B.getM());
			
			C c1=new C();
			c1.setB(20.3f);
			System.out.println(c1.getB());	

		}

	}
	class A{
		private int n;
		private static int m=10;
		
		public int getN() {
			return n;
		}
		public void setN(int n) {
			this.n = n;
		}
		public static int getM() {
			return m;
		}
		static
		{
			System.out.println("Inside static block 1");
		}
	}
	class B{
		private static int m=20;
		
		public static int getM()
		{
			return m;
		}
		static
		{
			System.out.println("Inside static block 2");
		}
	}

	class C{
		private float b;

		public float getB() {
			return b;
		}

		public void setB(float b) {
			this.b = b;
		}
		static
		{
			System.out.println("Inside static block 3");
		}
		
		
	}